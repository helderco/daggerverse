package main

import (
	_ "embed"
)

// Query is the query generated by graphiql to determine type information
//
//go:embed introspection.graphql
var query string

// Response is the introspection query response
type response struct {
	Schema *Schema `json:"__schema"`
}

type Schema struct {
	Types []*Type `json:"types"`
}

func (s *Schema) Query() *Type {
	return s.GetType("Query")
}

// Get a type by name
func (s *Schema) GetType(name string) *Type {
	for _, i := range s.Types {
		if i.Name == name {
			return i
		}
	}
	return nil
}

func (s *Schema) Scalars() []*Type {
	var scalars []*Type
	for _, t := range s.Types {
		if t.IsScalar() {
			scalars = append(scalars, t)
		}
	}
	return scalars
}

func (s *Schema) Enums() []*Type {
	var enums []*Type
	for _, t := range s.Types {
		if t.IsEnum() {
			enums = append(enums, t)
		}
	}
	return enums
}

func (s *Schema) InputObjects() []*Type {
	var inputObjects []*Type
	for _, t := range s.Types {
		if t.IsInputObject() {
			inputObjects = append(inputObjects, t)
		}
	}
	return inputObjects
}

func (s *Schema) Objects() []*Type {
	var objects []*Type
	for _, t := range s.Types {
		if t.IsObject() {
			objects = append(objects, t)
		}
	}
	return objects
}

type TypeKind string

const (
	TypeKindScalar      = TypeKind("SCALAR")
	TypeKindObject      = TypeKind("OBJECT")
	TypeKindInterface   = TypeKind("INTERFACE")
	TypeKindUnion       = TypeKind("UNION")
	TypeKindEnum        = TypeKind("ENUM")
	TypeKindInputObject = TypeKind("INPUT_OBJECT")
	TypeKindList        = TypeKind("LIST")
	TypeKindNonNull     = TypeKind("NON_NULL")
)

type Scalar string

const (
	ScalarInt     = Scalar("Int")
	ScalarFloat   = Scalar("Float")
	ScalarString  = Scalar("String")
	ScalarBoolean = Scalar("Boolean")
)

type Type struct {
	Kind        TypeKind     `json:"kind"`
	Name        string       `json:"name"`
	Description *string      `json:"description,omitempty"`
	Fields      []*Field     `json:"fields,omitempty"`
	InputFields []InputValue `json:"inputFields,omitempty"`
	EnumValues  []EnumValue  `json:"enumValues,omitempty"`
	Interfaces  []*Type      `json:"interfaces"`
}

func (t *Type) IsScalar() bool {
	return t.Kind == TypeKindScalar
}

func (t *Type) IsEnum() bool {
	return t.Kind == TypeKindEnum
}

func (t *Type) IsObject() bool {
	return t.Kind == TypeKindObject
}

func (t *Type) IsInputObject() bool {
	return t.Kind == TypeKindInputObject
}

// Get a field by name
func (t *Type) GetField(name string) *Field {
	for _, f := range t.Fields {
		if f.Name == name {
			return f
		}
	}
	return nil
}

type Field struct {
	Name              string        `json:"name"`
	Description       string        `json:"description"`
	TypeRef           *TypeRef      `json:"type"`
	Args              []*InputValue `json:"args"`
	IsDeprecated      bool          `json:"isDeprecated"`
	DeprecationReason string        `json:"deprecationReason"`

	NameSplit    string `json:"nameSplit,omitempty"`
	ParentObject *Type  `json:"-"`
}

func (f *Field) HasOptionalArgs() bool {
	for _, v := range f.Args {
		if v.TypeRef.IsOptional() {
			return true
		}
	}
	return false
}

func (f *Field) ReferencesType(typeName string) bool {
	// check return
	if f.TypeRef.ReferencesType(typeName) {
		return true
	}
	// check args
	for _, arg := range f.Args {
		if arg.TypeRef.ReferencesType(typeName) {
			return true
		}
	}
	return false
}

type TypeRef struct {
	Kind   TypeKind `json:"kind"`
	Name   string   `json:"name,omitempty"`
	OfType *TypeRef `json:"ofType,omitempty"`
}

func (r TypeRef) IsOptional() bool {
	return r.Kind != TypeKindNonNull
}

func (r TypeRef) IsScalar() bool {
	ref := r
	if r.Kind == TypeKindNonNull {
		ref = *ref.OfType
	}
	if ref.Kind == TypeKindScalar {
		return true
	}
	if ref.Kind == TypeKindEnum {
		return true
	}
	return false
}

func (r TypeRef) IsObject() bool {
	ref := r
	if r.Kind == TypeKindNonNull {
		ref = *ref.OfType
	}
	if ref.Kind == TypeKindObject {
		return true
	}
	return false
}

func (r TypeRef) IsList() bool {
	ref := r
	if r.Kind == TypeKindNonNull {
		ref = *ref.OfType
	}
	if ref.Kind == TypeKindList {
		return true
	}
	return false
}

func (r TypeRef) ReferencesType(typeName string) bool {
	if r.OfType != nil {
		return r.OfType.ReferencesType(typeName)
	}
	return r.Name == typeName
}

type InputValues []InputValue

type InputValue struct {
	Name         string   `json:"name"`
	Description  string   `json:"description"`
	DefaultValue *string  `json:"defaultValue"`
	TypeRef      *TypeRef `json:"type"`

	NameSplit string `json:"nameSplit,omitempty"`
}

type EnumValue struct {
	Name              string `json:"name"`
	Description       string `json:"description"`
	IsDeprecated      bool   `json:"isDeprecated"`
	DeprecationReason string `json:"deprecationReason"`
}
